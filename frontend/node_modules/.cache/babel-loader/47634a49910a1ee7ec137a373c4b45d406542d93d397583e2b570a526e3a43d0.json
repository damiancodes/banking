{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{accountsApi}from'../utils/api';export const useAccounts=()=>{const[accounts,setAccounts]=useState([]);const[summary,setSummary]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchAccounts=useCallback(async()=>{try{setLoading(true);setError(null);const[accountsData,summaryData]=await Promise.all([accountsApi.getAll(),accountsApi.getSummary()]);setAccounts(accountsData);setSummary(summaryData);}catch(err){console.error('Error fetching accounts:',err);setError('Failed to load accounts. Please try again.');}finally{setLoading(false);}},[]);const getAccountsByurrency=useCallback(currency=>{return accounts.filter(account=>account.currency===currency);},[accounts]);const getAccountByName=useCallback(name=>{return accounts.find(account=>account.name===name);},[accounts]);const getTotalBalance=useCallback(()=>{return summary.reduce((total,curr)=>{// Convert to USD for total (simplified)\nconst rates={KES:0.0067,USD:1,NGN:0.00125};return total+curr.total_balance*(rates[curr.currency]||1);},0);},[summary]);const refreshAccounts=useCallback(()=>{fetchAccounts();},[fetchAccounts]);useEffect(()=>{fetchAccounts();},[fetchAccounts]);return{accounts,summary,loading,error,getAccountsByurrency,getAccountByName,getTotalBalance,refreshAccounts};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
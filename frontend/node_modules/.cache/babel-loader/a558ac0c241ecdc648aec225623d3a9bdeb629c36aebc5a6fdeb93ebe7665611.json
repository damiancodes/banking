{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { transactionsApi } from '../utils/api';\nexport const useTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [creating, setCreating] = useState(false);\n  const fetchTransactions = useCallback(async filters => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await transactionsApi.getAll(filters);\n      setTransactions(data);\n    } catch (err) {\n      console.error('Error fetching transactions:', err);\n      setError('Failed to load transactions. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const createTransaction = useCallback(async transferData => {\n    try {\n      setCreating(true);\n      setError(null);\n      const newTransaction = await transactionsApi.create(transferData);\n\n      // Add to local state\n      setTransactions(prev => [newTransaction, ...prev]);\n      return newTransaction;\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response$data$er;\n      console.error('Error creating transaction:', err);\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message) || 'Failed to create transaction. Please try again.';\n      setError(errorMessage);\n      return null;\n    } finally {\n      setCreating(false);\n    }\n  }, []);\n  const getRecentTransactions = useCallback((limit = 5) => {\n    return transactions.slice(0, limit);\n  }, [transactions]);\n  const getTransactionsByAccount = useCallback(accountName => {\n    return transactions.filter(transaction => transaction.from_account === accountName || transaction.to_account === accountName);\n  }, [transactions]);\n  const getTransactionsByCurrency = useCallback(currency => {\n    return transactions.filter(transaction => transaction.currency === currency);\n  }, [transactions]);\n  const refreshTransactions = useCallback(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  return {\n    transactions,\n    loading,\n    error,\n    creating,\n    createTransaction,\n    getRecentTransactions,\n    getTransactionsByAccount,\n    getTransactionsByCurrency,\n    refreshTransactions,\n    fetchTransactions\n  };\n};\n_s(useTransactions, \"/wAGsrfhJPyjOJYYFu4oozSuNZ4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","transactionsApi","useTransactions","_s","transactions","setTransactions","loading","setLoading","error","setError","creating","setCreating","fetchTransactions","filters","data","getAll","err","console","createTransaction","transferData","newTransaction","create","prev","_err$response","_err$response$data","_err$response$data$er","errorMessage","response","message","getRecentTransactions","limit","slice","getTransactionsByAccount","accountName","filter","transaction","from_account","to_account","getTransactionsByCurrency","currency","refreshTransactions"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/hooks/useTransactions.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Transaction, TransferRequest, FilterOptions } from '../types';\nimport { transactionsApi } from '../utils/api';\n\nexport const useTransactions = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [creating, setCreating] = useState(false);\n\n  const fetchTransactions = useCallback(async (filters?: FilterOptions) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await transactionsApi.getAll(filters);\n      setTransactions(data);\n    } catch (err) {\n      console.error('Error fetching transactions:', err);\n      setError('Failed to load transactions. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createTransaction = useCallback(async (transferData: TransferRequest): Promise<Transaction | null> => {\n    try {\n      setCreating(true);\n      setError(null);\n      \n      const newTransaction = await transactionsApi.create(transferData);\n      \n      // Add to local state\n      setTransactions(prev => [newTransaction, ...prev]);\n      \n      return newTransaction;\n    } catch (err: any) {\n      console.error('Error creating transaction:', err);\n      const errorMessage = err.response?.data?.error?.message || 'Failed to create transaction. Please try again.';\n      setError(errorMessage);\n      return null;\n    } finally {\n      setCreating(false);\n    }\n  }, []);\n\n  const getRecentTransactions = useCallback((limit: number = 5) => {\n    return transactions.slice(0, limit);\n  }, [transactions]);\n\n  const getTransactionsByAccount = useCallback((accountName: string) => {\n    return transactions.filter(\n      transaction => \n        transaction.from_account === accountName || \n        transaction.to_account === accountName\n    );\n  }, [transactions]);\n\n  const getTransactionsByCurrency = useCallback((currency: string) => {\n    return transactions.filter(transaction => transaction.currency === currency);\n  }, [transactions]);\n\n  const refreshTransactions = useCallback(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n\n  return {\n    transactions,\n    loading,\n    error,\n    creating,\n    createTransaction,\n    getRecentTransactions,\n    getTransactionsByAccount,\n    getTransactionsByCurrency,\n    refreshTransactions,\n    fetchTransactions\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const formatCurrency = (amount, currency) => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  return formatter.format(amount);\n};\nexport const formatNumber = amount => {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\nexport const formatDate = (dateString, timezone) => {\n  const date = new Date(dateString);\n  const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  };\n  if (timezone) {\n    options.timeZone = timezone;\n  }\n  return new Intl.DateTimeFormat('en-US', options).format(date);\n};\nexport const formatTime = (dateString, timezone) => {\n  const date = new Date(dateString);\n  const options = {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  };\n  if (timezone) {\n    options.timeZone = timezone;\n  }\n  return new Intl.DateTimeFormat('en-US', options).format(date);\n};\nexport const formatRelativeDate = dateString => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  if (diffInMinutes < 1) {\n    return 'Just now';\n  } else if (diffInMinutes < 60) {\n    return `${diffInMinutes}m ago`;\n  } else if (diffInHours < 24) {\n    return `${diffInHours}h ago`;\n  } else if (diffInDays < 7) {\n    return `${diffInDays}d ago`;\n  } else {\n    return formatDate(dateString);\n  }\n};\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  return text.substring(0, maxLength) + '...';\n};","map":{"version":3,"names":["formatCurrency","amount","currency","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatNumber","formatDate","dateString","timezone","date","Date","options","year","month","day","hour","minute","timeZone","DateTimeFormat","formatTime","hour12","formatRelativeDate","now","diffInMs","getTime","diffInMinutes","Math","floor","diffInHours","diffInDays","truncateText","text","maxLength","length","substring"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/utils/formatters.ts"],"sourcesContent":["export const formatCurrency = (amount: number, currency: string): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  \n  return formatter.format(amount);\n};\n\nexport const formatNumber = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const formatDate = (dateString: string, timezone?: string): string => {\n  const date = new Date(dateString);\n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  };\n  \n  if (timezone) {\n    options.timeZone = timezone;\n  }\n  \n  return new Intl.DateTimeFormat('en-US', options).format(date);\n};\n\nexport const formatTime = (dateString: string, timezone?: string): string => {\n  const date = new Date(dateString);\n  const options: Intl.DateTimeFormatOptions = {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n  };\n  \n  if (timezone) {\n    options.timeZone = timezone;\n  }\n  \n  return new Intl.DateTimeFormat('en-US', options).format(date);\n};\n\nexport const formatRelativeDate = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n  if (diffInMinutes < 1) {\n    return 'Just now';\n  } else if (diffInMinutes < 60) {\n    return `${diffInMinutes}m ago`;\n  } else if (diffInHours < 24) {\n    return `${diffInHours}h ago`;\n  } else if (diffInDays < 7) {\n    return `${diffInDays}d ago`;\n  } else {\n    return formatDate(dateString);\n  }\n};\n\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  return text.substring(0, maxLength) + '...';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
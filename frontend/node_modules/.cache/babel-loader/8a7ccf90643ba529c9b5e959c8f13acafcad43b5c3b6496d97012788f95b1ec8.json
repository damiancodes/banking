{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { accountsApi } from '../utils/api';\nexport const useAccounts = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [summary, setSummary] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchAccounts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [accountsData, summaryData] = await Promise.all([accountsApi.getAll(), accountsApi.getSummary()]);\n      setAccounts(accountsData);\n      setSummary(summaryData);\n    } catch (err) {\n      console.error('Error fetching accounts:', err);\n      setError('Failed to load accounts. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getAccountsByurrency = useCallback(currency => {\n    return accounts.filter(account => account.currency === currency);\n  }, [accounts]);\n  const getAccountByName = useCallback(name => {\n    return accounts.find(account => account.name === name);\n  }, [accounts]);\n  const getTotalBalance = useCallback(() => {\n    return summary.reduce((total, curr) => {\n      // Convert to USD for total (simplified)\n      const rates = {\n        KES: 0.0067,\n        USD: 1,\n        NGN: 0.00125\n      };\n      return total + curr.total_balance * (rates[curr.currency] || 1);\n    }, 0);\n  }, [summary]);\n  const refreshAccounts = useCallback(() => {\n    fetchAccounts();\n  }, [fetchAccounts]);\n  useEffect(() => {\n    fetchAccounts();\n  }, [fetchAccounts]);\n  return {\n    accounts,\n    summary,\n    loading,\n    error,\n    getAccountsByurrency,\n    getAccountByName,\n    getTotalBalance,\n    refreshAccounts\n  };\n};\n_s(useAccounts, \"YB4cOJJs48GJiiImpYXW7o+ymGw=\");","map":{"version":3,"names":["useState","useEffect","useCallback","accountsApi","useAccounts","_s","accounts","setAccounts","summary","setSummary","loading","setLoading","error","setError","fetchAccounts","accountsData","summaryData","Promise","all","getAll","getSummary","err","console","getAccountsByurrency","currency","filter","account","getAccountByName","name","find","getTotalBalance","reduce","total","curr","rates","KES","USD","NGN","total_balance","refreshAccounts"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/hooks/useAccounts.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Account, BalanceSummary } from '../types';\nimport { accountsApi } from '../utils/api';\n\nexport const useAccounts = () => {\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [summary, setSummary] = useState<BalanceSummary[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchAccounts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [accountsData, summaryData] = await Promise.all([\n        accountsApi.getAll(),\n        accountsApi.getSummary()\n      ]);\n      \n      setAccounts(accountsData);\n      setSummary(summaryData);\n    } catch (err) {\n      console.error('Error fetching accounts:', err);\n      setError('Failed to load accounts. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const getAccountsByurrency = useCallback((currency: string) => {\n    return accounts.filter(account => account.currency === currency);\n  }, [accounts]);\n\n  const getAccountByName = useCallback((name: string) => {\n    return accounts.find(account => account.name === name);\n  }, [accounts]);\n\n  const getTotalBalance = useCallback(() => {\n    return summary.reduce((total, curr) => {\n      // Convert to USD for total (simplified)\n      const rates = { KES: 0.0067, USD: 1, NGN: 0.00125 };\n      return total + (curr.total_balance * (rates[curr.currency as keyof typeof rates] || 1));\n    }, 0);\n  }, [summary]);\n\n  const refreshAccounts = useCallback(() => {\n    fetchAccounts();\n  }, [fetchAccounts]);\n\n  useEffect(() => {\n    fetchAccounts();\n  }, [fetchAccounts]);\n\n  return {\n    accounts,\n    summary,\n    loading,\n    error,\n    getAccountsByurrency,\n    getAccountByName,\n    getTotalBalance,\n    refreshAccounts\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,SAASC,WAAW,QAAQ,cAAc;AAE1C,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAmB,EAAE,CAAC;EAC5D,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMc,aAAa,GAAGZ,WAAW,CAAC,YAAY;IAC5C,IAAI;MACFS,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAM,CAACE,YAAY,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpDf,WAAW,CAACgB,MAAM,CAAC,CAAC,EACpBhB,WAAW,CAACiB,UAAU,CAAC,CAAC,CACzB,CAAC;MAEFb,WAAW,CAACQ,YAAY,CAAC;MACzBN,UAAU,CAACO,WAAW,CAAC;IACzB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,OAAO,CAACV,KAAK,CAAC,0BAA0B,EAAES,GAAG,CAAC;MAC9CR,QAAQ,CAAC,4CAA4C,CAAC;IACxD,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,oBAAoB,GAAGrB,WAAW,CAAEsB,QAAgB,IAAK;IAC7D,OAAOlB,QAAQ,CAACmB,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACF,QAAQ,KAAKA,QAAQ,CAAC;EAClE,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,MAAMqB,gBAAgB,GAAGzB,WAAW,CAAE0B,IAAY,IAAK;IACrD,OAAOtB,QAAQ,CAACuB,IAAI,CAACH,OAAO,IAAIA,OAAO,CAACE,IAAI,KAAKA,IAAI,CAAC;EACxD,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EAEd,MAAMwB,eAAe,GAAG5B,WAAW,CAAC,MAAM;IACxC,OAAOM,OAAO,CAACuB,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;MACrC;MACA,MAAMC,KAAK,GAAG;QAAEC,GAAG,EAAE,MAAM;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAQ,CAAC;MACnD,OAAOL,KAAK,GAAIC,IAAI,CAACK,aAAa,IAAIJ,KAAK,CAACD,IAAI,CAACT,QAAQ,CAAuB,IAAI,CAAC,CAAE;IACzF,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,EAAE,CAAChB,OAAO,CAAC,CAAC;EAEb,MAAM+B,eAAe,GAAGrC,WAAW,CAAC,MAAM;IACxCY,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnBb,SAAS,CAAC,MAAM;IACda,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,OAAO;IACLR,QAAQ;IACRE,OAAO;IACPE,OAAO;IACPE,KAAK;IACLW,oBAAoB;IACpBI,gBAAgB;IAChBG,eAAe;IACfS;EACF,CAAC;AACH,CAAC;AAAClC,EAAA,CA5DWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
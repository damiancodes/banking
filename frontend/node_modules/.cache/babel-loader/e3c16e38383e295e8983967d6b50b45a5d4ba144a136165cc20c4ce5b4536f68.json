{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const accountsApi = {\n  getAll: async () => {\n    const response = await api.get('/accounts');\n    return response.data.data;\n  },\n  getByName: async name => {\n    const response = await api.get(`/accounts/${name}`);\n    return response.data.data;\n  },\n  getByCurrency: async currency => {\n    const response = await api.get(`/accounts/currency/${currency}`);\n    return response.data.data;\n  },\n  getSummary: async () => {\n    const response = await api.get('/accounts/summary');\n    return response.data.data;\n  },\n  getExchangeRates: async () => {\n    const response = await api.get('/accounts/exchange-rates');\n    return response.data.data;\n  }\n};\nexport const transactionsApi = {\n  getAll: async filters => {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== '') {\n          params.append(key, filters[key]);\n        }\n      });\n    }\n    const response = await api.get(`/transactions?${params}`);\n    return response.data.data;\n  },\n  create: async transferData => {\n    const response = await api.post('/transactions', transferData);\n    return response.data.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","accountsApi","getAll","response","get","data","getByName","name","getByCurrency","currency","getSummary","getExchangeRates","transactionsApi","filters","params","URLSearchParams","Object","keys","forEach","key","undefined","append","transferData","post"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Account, Transaction, TransferRequest, ApiResponse, BalanceSummary, ExchangeRates } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const accountsApi = {\n  getAll: async (): Promise<Account[]> => {\n    const response = await api.get<ApiResponse<Account[]>>('/accounts');\n    return response.data.data;\n  },\n\n  getByName: async (name: string): Promise<Account> => {\n    const response = await api.get<ApiResponse<Account>>(`/accounts/${name}`);\n    return response.data.data;\n  },\n\n  getByCurrency: async (currency: string): Promise<Account[]> => {\n    const response = await api.get<ApiResponse<Account[]>>(`/accounts/currency/${currency}`);\n    return response.data.data;\n  },\n\n  getSummary: async (): Promise<BalanceSummary[]> => {\n    const response = await api.get<ApiResponse<BalanceSummary[]>>('/accounts/summary');\n    return response.data.data;\n  },\n\n  getExchangeRates: async (): Promise<ExchangeRates> => {\n    const response = await api.get<ApiResponse<ExchangeRates>>('/accounts/exchange-rates');\n    return response.data.data;\n  },\n};\n\nexport const transactionsApi = {\n  getAll: async (filters?: any): Promise<Transaction[]> => {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== '') {\n          params.append(key, filters[key]);\n        }\n      });\n    }\n    \n    const response = await api.get<ApiResponse<Transaction[]>>(`/transactions?${params}`);\n    return response.data.data;\n  },\n\n  create: async (transferData: TransferRequest): Promise<Transaction> => {\n    const response = await api.post<ApiResponse<Transaction>>('/transactions', transferData);\n    return response.data.data;\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzBC,MAAM,EAAE,MAAAA,CAAA,KAAgC;IACtC,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAyB,WAAW,CAAC;IACnE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDC,SAAS,EAAE,MAAOC,IAAY,IAAuB;IACnD,MAAMJ,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAuB,aAAaG,IAAI,EAAE,CAAC;IACzE,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDG,aAAa,EAAE,MAAOC,QAAgB,IAAyB;IAC7D,MAAMN,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAyB,sBAAsBK,QAAQ,EAAE,CAAC;IACxF,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDK,UAAU,EAAE,MAAAA,CAAA,KAAuC;IACjD,MAAMP,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAgC,mBAAmB,CAAC;IAClF,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDM,gBAAgB,EAAE,MAAAA,CAAA,KAAoC;IACpD,MAAMR,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAA6B,0BAA0B,CAAC;IACtF,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;AAED,OAAO,MAAMO,eAAe,GAAG;EAC7BV,MAAM,EAAE,MAAOW,OAAa,IAA6B;IACvD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIF,OAAO,EAAE;MACXG,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;QAClC,IAAIN,OAAO,CAACM,GAAG,CAAC,KAAKC,SAAS,IAAIP,OAAO,CAACM,GAAG,CAAC,KAAK,EAAE,EAAE;UACrDL,MAAM,CAACO,MAAM,CAACF,GAAG,EAAEN,OAAO,CAACM,GAAG,CAAC,CAAC;QAClC;MACF,CAAC,CAAC;IACJ;IAEA,MAAMhB,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAA6B,iBAAiBU,MAAM,EAAE,CAAC;IACrF,OAAOX,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDR,MAAM,EAAE,MAAOyB,YAA6B,IAA2B;IACrE,MAAMnB,QAAQ,GAAG,MAAMP,GAAG,CAAC2B,IAAI,CAA2B,eAAe,EAAED,YAAY,CAAC;IACxF,OAAOnB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
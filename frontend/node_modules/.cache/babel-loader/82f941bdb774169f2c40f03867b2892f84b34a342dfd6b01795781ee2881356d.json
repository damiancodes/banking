{"ast":null,"code":"var _jsxFileName = \"/home/damien/Desktop/Treasury Movement Simulator/frontend/src/pages/TransferPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from '../components/Header';\nimport TransferForm from '../components/TransferForm';\nimport { useAccounts } from '../hooks/useAccounts';\nimport { useTransactions } from '../hooks/useTransactions';\nimport { useToasts } from '../components/ToastContainer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TransferPage = ({\n  onNavigate\n}) => {\n  _s();\n  const {\n    accounts,\n    getTotalBalance,\n    refreshAccounts\n  } = useAccounts();\n  const {\n    createTransaction,\n    loading,\n    error,\n    refreshTransactions\n  } = useTransactions();\n  const {\n    showSuccess,\n    showError,\n    showWarning\n  } = useToasts();\n  const handleSubmit = async data => {\n    try {\n      const result = await createTransaction(data);\n      if (result) {\n        var _data$note;\n        // Check if it's a future transfer\n        const isFutureTransfer = ((_data$note = data.note) === null || _data$note === void 0 ? void 0 : _data$note.includes('transfer_date:')) && new Date(data.note.split('transfer_date:')[1]) > new Date();\n        if (isFutureTransfer) {\n          showSuccess('Transfer Scheduled!', 'Your transfer has been scheduled for the selected date.', 4000);\n        } else {\n          showSuccess('Transfer Completed!', 'Your money has been transferred successfully.', 3000);\n        }\n        refreshAccounts();\n        refreshTransactions();\n\n        // Navigate to transactions page after a short delay\n        setTimeout(() => {\n          onNavigate('transactions');\n        }, 2000);\n      }\n    } catch (err) {\n      showError('Transfer Failed', 'There was an error processing your transfer. Please try again.');\n    }\n  };\n  const handleInsufficientFunds = () => {\n    showWarning('Insufficient Balance', 'Please check your account balance before making a transfer.');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      totalBalance: getTotalBalance(),\n      userName: \"Treasury Manager\",\n      onRefresh: () => {},\n      isRefreshing: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-6\",\n      children: /*#__PURE__*/_jsxDEV(TransferForm, {\n        accounts: accounts,\n        onSubmit: handleSubmit,\n        loading: loading,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TransferPage, \"NbRK5VWblezEZ7F5WouEvCyf0AE=\", false, function () {\n  return [useAccounts, useTransactions, useToasts];\n});\n_c = TransferPage;\nexport default TransferPage;\nvar _c;\n$RefreshReg$(_c, \"TransferPage\");","map":{"version":3,"names":["React","Header","TransferForm","useAccounts","useTransactions","useToasts","jsxDEV","_jsxDEV","Fragment","_Fragment","TransferPage","onNavigate","_s","accounts","getTotalBalance","refreshAccounts","createTransaction","loading","error","refreshTransactions","showSuccess","showError","showWarning","handleSubmit","data","result","_data$note","isFutureTransfer","note","includes","Date","split","setTimeout","err","handleInsufficientFunds","children","totalBalance","userName","onRefresh","isRefreshing","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","_c","$RefreshReg$"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/pages/TransferPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from '../components/Header';\nimport TransferForm from '../components/TransferForm';\nimport { TransferRequest } from '../types';\nimport { useAccounts } from '../hooks/useAccounts';\nimport { useTransactions } from '../hooks/useTransactions';\nimport { useToasts } from '../components/ToastContainer';\n\ninterface TransferPageProps {\n  onNavigate: (page: string) => void;\n}\n\nconst TransferPage: React.FC<TransferPageProps> = ({ onNavigate }) => {\n  const { accounts, getTotalBalance, refreshAccounts } = useAccounts();\n  const { createTransaction, loading, error, refreshTransactions } = useTransactions();\n  const { showSuccess, showError, showWarning } = useToasts();\n\n  const handleSubmit = async (data: TransferRequest) => {\n    try {\n      const result = await createTransaction(data);\n      if (result) {\n        // Check if it's a future transfer\n        const isFutureTransfer = data.note?.includes('transfer_date:') && \n          new Date(data.note.split('transfer_date:')[1]) > new Date();\n        \n        if (isFutureTransfer) {\n          showSuccess(\n            'Transfer Scheduled!', \n            'Your transfer has been scheduled for the selected date.',\n            4000\n          );\n        } else {\n          showSuccess(\n            'Transfer Completed!', \n            'Your money has been transferred successfully.',\n            3000\n          );\n        }\n        \n        refreshAccounts();\n        refreshTransactions();\n        \n        // Navigate to transactions page after a short delay\n        setTimeout(() => {\n          onNavigate('transactions');\n        }, 2000);\n      }\n    } catch (err) {\n      showError(\n        'Transfer Failed', \n        'There was an error processing your transfer. Please try again.'\n      );\n    }\n  };\n\n  const handleInsufficientFunds = () => {\n    showWarning(\n      'Insufficient Balance', \n      'Please check your account balance before making a transfer.'\n    );\n  };\n\n  return (\n    <>\n      <Header \n        totalBalance={getTotalBalance()} \n        userName=\"Treasury Manager\" \n        onRefresh={() => {}} \n        isRefreshing={loading} \n      />\n      <div className=\"pt-6\">\n        <TransferForm\n          accounts={accounts}\n          onSubmit={handleSubmit}\n          loading={loading}\n          error={error}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default TransferPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
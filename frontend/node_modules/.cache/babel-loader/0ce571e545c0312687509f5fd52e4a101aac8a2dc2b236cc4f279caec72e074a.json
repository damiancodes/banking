{"ast":null,"code":"import { CURRENCY_SYMBOLS } from './constants';\nexport const formatCurrency = (amount, currency) => {\n  const symbol = CURRENCY_SYMBOLS[currency] || currency;\n  return `${symbol} ${amount.toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatTime = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatRelativeTime = dateString => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  if (diffInSeconds < 60) {\n    return 'Just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  } else {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} day${days > 1 ? 's' : ''} ago`;\n  }\n};\nexport const formatAmount = amount => {\n  if (amount >= 1000000) {\n    return `${(amount / 1000000).toFixed(1)}M`;\n  } else if (amount >= 1000) {\n    return `${(amount / 1000).toFixed(1)}K`;\n  }\n  return amount.toString();\n};\nexport const sanitizeString = str => {\n  return str.trim().replace(/[<>]/g, '');\n};","map":{"version":3,"names":["CURRENCY_SYMBOLS","formatCurrency","amount","currency","symbol","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","formatTime","toLocaleTimeString","formatRelativeTime","now","diffInSeconds","Math","floor","getTime","minutes","hours","days","formatAmount","toFixed","toString","sanitizeString","str","trim","replace"],"sources":["/home/damien/Desktop/Treasury Movement Simulator/frontend/src/utils/formatters.ts"],"sourcesContent":["import { CURRENCY_SYMBOLS } from './constants';\n\nexport const formatCurrency = (amount: number, currency: string): string => {\n  const symbol = CURRENCY_SYMBOLS[currency as keyof typeof CURRENCY_SYMBOLS] || currency;\n  return `${symbol} ${amount.toLocaleString('en-US', { \n    minimumFractionDigits: 2, \n    maximumFractionDigits: 2 \n  })}`;\n};\n\nexport const formatDate = (dateString: string): string => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nexport const formatTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  return date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nexport const formatRelativeTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n  if (diffInSeconds < 60) {\n    return 'Just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  } else {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} day${days > 1 ? 's' : ''} ago`;\n  }\n};\n\nexport const formatAmount = (amount: number): string => {\n  if (amount >= 1000000) {\n    return `${(amount / 1000000).toFixed(1)}M`;\n  } else if (amount >= 1000) {\n    return `${(amount / 1000).toFixed(1)}K`;\n  }\n  return amount.toString();\n};\n\nexport const sanitizeString = (str: string): string => {\n  return str.trim().replace(/[<>]/g, '');\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,aAAa;AAE9C,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAc,EAAEC,QAAgB,KAAa;EAC1E,MAAMC,MAAM,GAAGJ,gBAAgB,CAACG,QAAQ,CAAkC,IAAIA,QAAQ;EACtF,OAAO,GAAGC,MAAM,IAAIF,MAAM,CAACG,cAAc,CAAC,OAAO,EAAE;IACjDC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,EAAE;AACN,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,UAAkB,IAAa;EACxD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIT,UAAkB,IAAa;EACxD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACS,kBAAkB,CAAC,OAAO,EAAE;IACtCH,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAIX,UAAkB,IAAa;EAChE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMY,GAAG,GAAG,IAAIV,IAAI,CAAC,CAAC;EACtB,MAAMW,aAAa,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,GAAGf,IAAI,CAACe,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC;EAEzE,IAAIH,aAAa,GAAG,EAAE,EAAE;IACtB,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,aAAa,GAAG,IAAI,EAAE;IAC/B,MAAMI,OAAO,GAAGH,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,EAAE,CAAC;IAC9C,OAAO,GAAGI,OAAO,UAAUA,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EACzD,CAAC,MAAM,IAAIJ,aAAa,GAAG,KAAK,EAAE;IAChC,MAAMK,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,IAAI,CAAC;IAC9C,OAAO,GAAGK,KAAK,QAAQA,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EACnD,CAAC,MAAM;IACL,MAAMC,IAAI,GAAGL,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,KAAK,CAAC;IAC9C,OAAO,GAAGM,IAAI,OAAOA,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAI3B,MAAc,IAAa;EACtD,IAAIA,MAAM,IAAI,OAAO,EAAE;IACrB,OAAO,GAAG,CAACA,MAAM,GAAG,OAAO,EAAE4B,OAAO,CAAC,CAAC,CAAC,GAAG;EAC5C,CAAC,MAAM,IAAI5B,MAAM,IAAI,IAAI,EAAE;IACzB,OAAO,GAAG,CAACA,MAAM,GAAG,IAAI,EAAE4B,OAAO,CAAC,CAAC,CAAC,GAAG;EACzC;EACA,OAAO5B,MAAM,CAAC6B,QAAQ,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,GAAW,IAAa;EACrD,OAAOA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}